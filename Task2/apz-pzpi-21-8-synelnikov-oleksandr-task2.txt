1 ОПИС АРХІТЕКТУРИ СИСТЕМИ

Гібридна архітектура, що поєднує серверну та мікросервісну, була обрана для цього проекту з метою досягнення оптимального балансу між централізованим управлінням та гнучкістю мікросервісів. Серверна частина забезпечує централізовану обробку даних та управління основними функціями системи, такими як створення ферм та налаштування їх параметрів. Це спрощує розробку та підтримку системи, забезпечуючи єдину точку входу та управління.
Мікросервіси використовуються з метою спрощення розробки і аутсорсингу розробки системи користувачів і бази даних на мікросервіси з відкритим кодом.
Крім того, гібридна архітектура дозволяє розподілити навантаження між сервером та мікросервісами, що підвищує продуктивність та надійність системи. У разі відмови одного мікросервісу, інші компоненти продовжать працювати.
Таким чином, гібридна архітектура є оптимальним вибором для цього проекту, оскільки вона дозволяє поєднати переваги серверної та мікросервісної архітектур, забезпечуючи ефективну реалізацію функціональності системи та відповідність вимогам проекту.

2  ПОБУДОВА ДІАГРАМИ РОЗГОРТАННЯ

Серверна частина системи побудована на базі хмарної платформи Supabase, яка надає функціональність бази даних PostgreSQL, а також вбудовані сервіси аутентифікації та авторизації користувачів
Веб-сервер, розроблений з використанням Node.js та фреймворку Next.js, відповідає за обробку запитів від клієнтів, виконання серверної логіки, рендеринг сторінок та обробку даних. 
Для взаємодії з зовнішніми застосунками та сервісами використовується Rest API, що надає стандартизований інтерфейс для доступу до даних та функціональності сервера. Це дозволяє інтегрувати систему з іншими платформами та розширювати її можливості.
Клієнтська частина представлена веб-браузером, що використовується для доступу до веб-інтерфейсу системи, та мобільним додатком на платформі Android, що забезпечує доступ до функціональності системи на мобільних пристроях. Взаємодія з сервером здійснюється за допомогою протоколу HTTPS, що забезпечує безпечну передачу даних між клієнтом та сервером.
Система також включає мікроконтролер Arduino ESP32, що дозволяє взаємодіяти з фізичними пристроями або сенсорами, такими як термометри. Підключення IoT до сервера здійснюватиметься за допомогою протокола HTTPS, що забезпечує безпечну передачу даних між пристроями.
Діаграму розгортання наведено в додатку А.
 
3 ОПИС АРХІТЕКТУРИ СЕРВЕРНОЇ ЧАСТИНИ

Серверна частина програмного забезпечення буде побудована на основі хмарної платформи Supabase, яка надає готову інфраструктуру для роботи з базою даних PostgreSQL. Supabase спрощує процес створення та розгортання серверної частини, надаючи зручний інтерфейс для роботи з базою даних, а також вбудовані сервіси аутентифікації та авторизації користувачів.
Для обробки запитів від клієнтів та виконання серверної логіки буде використано середовище виконання Node.js та фреймворк Next.js. Node.js дозволяє використовувати JavaScript для розробки серверної логіки, що забезпечує ефективну роботу сервера та спрощує процес розробки. Для взаємодії з зовнішніми застосунками та сервісами буде використано Rest API.
Серверна частина програмного забезпечення буде побудована на основі сучасних технологій, що забезпечують високу продуктивність, масштабованість та безпеку. Використання хмарної платформи Supabase дозволить спростити розгортання та управління серверною частиною, а Node.js та Next.js забезпечать ефективну обробку запитів та виконання серверної логіки та відображення інтернет-сторінок. 
 
4 ПОБУДОВА ДІАГРАМИ ПРЕЦЕДЕНТІВ

Давайте розглянемо діаграму прецедентів. В програмній системі буде три види користувачів, які будуть мати такі функції:
-	Адміністратор: Має повний доступ до системи. Може додавати та видаляти співробітників, додавати та видаляти корів, додавати та видаляти обладнання, відстежувати стан корів, керувати ВР пристроями, налаштовувати ферму та обладнання, переглядати історію станів корів, керувати персоналом ферми та переглядати статистику корів, тобто він має повний доступ до бази даних програмної системи.
-	Фермер: Може відстежувати стан корів, керувати ВР пристроями, переглядати історію станів корів та переглядати статистику корів.
-	Власник ферми: Може створювати ферму, а також додавати усю потрібну інформацію, таку як фермерів, тварин, може переглядати статистику по фермі та коровам.
Діаграму наведено у додатку Б.
 
5 ПОБУДОВА ER-ДІАГРАМИ

Для проектування бази даних було розроблено ER-модель даних (див. додаток В). Вона складається з 6 таблиць: клієнт, користувач, вантаж, точка, локація.
Розглянемо зв’язки між таблицями:
-	Worker - User (Працівник - Користувач): Кожен працівник має унікальний обліковий запис користувача, що забезпечує індивідуальний доступ до системи. Це реалізується через зовнішній ключ user_id у таблиці Worker, який однозначно посилається на запис у таблиці User.
-	Worker - Farm (Працівник - Ферма): Працівник може бути закріплений за конкретною фермою, що дозволяє відстежувати, хто де працює. Зовнішній ключ farm_id у таблиці Worker вказує на ферму, де працівник зайнятий.
-	Cow - Farm (Корова - Ферма): Кожна корова належить певній фермі, що важливо для обліку поголів'я та управління стадом. Зовнішній ключ farm_id у таблиці Cow визначає, на якій фермі знаходиться корова.
-	Equipment - Farm (Обладнання - Ферма): Обладнання закріплюється за конкретною фермою для ефективного контролю та обліку ресурсів. Зовнішній ключ farm_id у таблиці Equipment вказує на ферму, якій належить обладнання.
-	Report - Worker (Звіт - Працівник): Звіт завжди створюється конкретним працівником, що дозволяє відстежувати відповідальність та авторство. Зовнішній ключ worker_id у таблиці Report визначає автора звіту.
-	Report - Cow (Звіт - Корова): Звіт може стосуватися конкретної корови, що дає змогу фіксувати інформацію про стан тварини, надої тощо. Зовнішній ключ cow_id у таблиці Report вказує на корову, про яку йдеться у звіті. Важливо зазначити, що цей зв'язок може бути необов'язковим, якщо звіти можуть мати загальний характер і не стосуватися конкретної корови.
 
6 СПЕЦИФІКАЦІЯ REST

Розроблена система REST API складається з 20 кінцевих точок Для взаємодії з ними потрібно використовувати різні методи запитів, такі як: GET, POST, PUT та DELETE (див. таблиця 1).
Метод	URL	Опис
POST	/api/users	Створення нового користувача
GET	/api/users/:id	Отримання інформації про користувача
PUT	/api/users/:id	Оновлення інформації про користувача
DELETE	/api/users/:id	Видалення користувача
POST	/api/farms	Створення нової ферми
GET	/api/farms/:id	Отримання інформації про ферму
PUT	/api/farms/:id	Оновлення інформації про ферму
DELETE	/api/farms/:id	Видалення ферми
POST	/api/cows	Додавання нової корови
GET	/api/cows/:id	Отримання інформації про корову
PUT	/api/cows/:id	Оновлення інформації про корову
DELETE	/api/cows/:id	Видалення корови
POST	/api/equipment	Додавання нового обладнання
GET	/api/equipment/:id	Отримання інформації про обладнання
PUT	/api/equipment/:id	Оновлення інформації про обладнання
DELETE	/api/equipment/:id	Видалення обладнання
POST	/api/cow_states	Додавання нового запису про стан корови
GET	/api/cow_states/:id	Отримання інформації про стан корови
PUT	/api/cow_states/:id	Оновлення інформації про стан корови
DELETE	/api/cow_states/:id	Видалення запису про стан корови

7 ПОБУДОВА ДІАГРАМИ АКТИВНОСТІ

Розглянемо діаграму активності, яка буде відображати дію авторизацію користувача в аккаунт (див. додаток Г). Користувач переходить на сторінку авторизації в акаунт. Далі він вводить електрону пошту та пароль. Система перевіряє введені дані. Якщо дані введені правильно, авторизація проходить успішно, і користувач отримує доступ до функціоналу. Якщо ж дані введені неправильно, авторизація проходить не вдало, і користувачу пропонується спробувати знову.
